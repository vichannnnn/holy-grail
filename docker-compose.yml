services:
  backend:
    container_name: backend
    build: ./holy-grail-backend/backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
      - "9000:9000"
    networks:
      - holy-grail-network
    depends_on:
      - db
      - celery
    environment:
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
      BACKEND_CONTAINER_URL: ${BACKEND_CONTAINER_URL}
      GOOGLE_APPLICATION_PROPERTY_ID: ${GOOGLE_APPLICATION_PROPERTY_ID}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ALGORITHM: ${ALGORITHM}
      SECRET_KEY: ${SECRET_KEY}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_CLOUDFRONT_URL: ${AWS_CLOUDFRONT_URL}
      MAILTRAP_BEARER_TOKEN: ${MAILTRAP_BEARER_TOKEN}
      MAILTRAP_API_KEY: ${MAILTRAP_API_KEY}
      PRODUCTION: ${PRODUCTION}
    restart: unless-stopped
    volumes:
      - ./holy-grail-backend/backend:/app

  db:
    container_name: db
    networks:
      - holy-grail-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      interval: 5s
      retries: 10
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
    image: postgres:14.1-alpine
    ports:
      - '5432:5432'
    restart: unless-stopped
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./holy-grail-backend/db:/docker-entrypoint-initdb.d/

  redis:
    container_name: redis
    image: redis:7.0.7-alpine
    networks:
      - holy-grail-network
    ports:
      - "6379"
    depends_on:
      - db
    command: redis-server --loglevel verbose
    restart: unless-stopped

  celery:
    container_name: celery
    networks:
      - holy-grail-network
    environment:
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
      GOOGLE_APPLICATION_PROPERTY_ID: ${GOOGLE_APPLICATION_PROPERTY_ID}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ALGORITHM: ${ALGORITHM}
      SECRET_KEY: ${SECRET_KEY}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_CLOUDFRONT_URL: ${AWS_CLOUDFRONT_URL}
      MAILTRAP_BEARER_TOKEN: ${MAILTRAP_BEARER_TOKEN}
      MAILTRAP_API_KEY: ${MAILTRAP_API_KEY}
      PRODUCTION: ${PRODUCTION}
    depends_on:
      - redis
    build:
      context: ./holy-grail-backend/backend
    command: celery -A app.utils.worker worker -B --loglevel=info
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "celery inspect ping" ]
    volumes:
      - ./holy-grail-backend/backend:/app

networks:
  holy-grail-network:
    name: holy-grail-network
    driver: bridge
