"""subject-category-fk-relationship

Revision ID: fcf930aadcbe
Revises: 5797ef4920d2
Create Date: 2023-07-09 13:40:32.018082

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "fcf930aadcbe"
down_revision = "5797ef4920d2"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("category_level_name_key", "category_level", type_="unique")
    op.add_column("subjects", sa.Column("category_id", sa.Integer()))
    op.drop_constraint("subjects_name_key", "subjects", type_="unique")
    op.create_unique_constraint(
        "category_level_name_unique", "subjects", ["name", "category_id"]
    )
    op.create_foreign_key(None, "subjects", "category_level", ["category_id"], ["id"])
    op.alter_column("subjects", "category_id", nullable=True)
    # ### end Alembic commands ###

    connection = op

    # Assign 'A' level category to subjects with H1 H2 and H3 prefix.
    connection.execute(
        """
        UPDATE subjects
        SET category_id = (
            SELECT id FROM category_level WHERE name = 'GCE ''A'' Levels'
        )
        WHERE name ~ '^H[123]';
        """
    )

    # Assign IB category to subjects with HL SL prefix.
    connection.execute(
        """
        UPDATE subjects
        SET category_id = (
            SELECT id FROM category_level WHERE name = 'IB'
        )
        WHERE name LIKE 'SL %%' OR name LIKE 'HL %%';
        """
    )

    # Assign 'O' level category to existing subjects with ID 30-47
    connection.execute(
        """
        UPDATE subjects
        SET category_id = (
            SELECT id FROM category_level WHERE name = 'GCE ''O'' Levels'
        )
        WHERE id BETWEEN 30 AND 47;
        """
    )

    # Clone subjects with ID 30-47 and assign them to the 'N' level category
    connection.execute(
        """
        INSERT INTO subjects (name, category_id)
        SELECT name, (SELECT id FROM category_level WHERE name = 'GCE ''N'' Levels')
        FROM subjects
        WHERE id BETWEEN 30 AND 47
        RETURNING id;
        """
    )

    connection.execute(
        """
        UPDATE library
        SET subject = (
            SELECT id FROM subjects WHERE name = (
                SELECT name FROM subjects WHERE id = library.subject
            ) AND category_id = library.category
        );
        """
    )

    # After all subjects have a category_id, add the NOT NULL constraint
    op.alter_column("subjects", "category_id", nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "subjects", type_="foreignkey")
    op.drop_constraint("category_level_name_unique", "subjects", type_="unique")
    op.create_unique_constraint("subjects_name_key", "subjects", ["name"])
    op.drop_column("subjects", "category_id")
    op.create_unique_constraint("category_level_name_key", "category_level", ["name"])
    # ### end Alembic commands ###
