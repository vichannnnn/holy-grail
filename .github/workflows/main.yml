name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - dev
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vichannnnn/holy-grail

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Copy .env_example to .env
        run: cp .env_example .env

      - name: Run tests with coverage
        run: make coverage version="dev"
        if: github.ref == 'refs/heads/dev' || (github.event_name == 'pull_request' && github.base_ref == 'dev')

      - name: Run tests with coverage
        run: make coverage version="prod"
        if: github.ref == 'refs/heads/master'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  build:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CICD_TOKEN }}

      - name: Define tag suffix and Dockerfile
        run: |
            if [[ "${{ github.ref }}" == 'refs/heads/master' ]]; then 
              echo "TAG_SUFFIX=" >> $GITHUB_ENV
              echo "DOCKERFILE=Dockerfile.prod" >> $GITHUB_ENV
            else 
              echo "TAG_SUFFIX=-dev" >> $GITHUB_ENV
              echo "DOCKERFILE=Dockerfile.dev" >> $GITHUB_ENV
            fi

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./holy-grail-backend/backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/holy-grail-backend${{ env.TAG_SUFFIX }}:latest

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./holy-grail-frontend
          file: ./holy-grail-frontend/Dockerfile.dev
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/holy-grail-frontend${{ env.TAG_SUFFIX }}:latest

      - name: Build and push Scheduler Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./holy-grail-backend/backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/holy-grail-scheduler${{ env.TAG_SUFFIX }}:latest

  deploy:
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using private key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ github.ref == 'refs/heads/dev' && secrets.DEV_REMOTE_HOST || secrets.MASTER_REMOTE_HOST }}
          username: ${{ github.ref == 'refs/heads/dev' && secrets.DEV_REMOTE_USER || secrets.MASTER_REMOTE_USER }}
          key: ${{ github.ref == 'refs/heads/dev' && secrets.DEV_SSH_PRIVATE_KEY || secrets.MASTER_SSH_PRIVATE_KEY }}
          script: |
            cd ./holy-grail
            docker compose pull
            docker compose up -d
  

     