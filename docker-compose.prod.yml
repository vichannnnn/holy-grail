version: '3.8'

services:
  holy-grail-frontend:
    container_name: holy-grail-frontend
    image: ghcr.io/vichannnnn/holy-grail/holy-grail-frontend:latest
    depends_on:
      - holy-grail-backend
    networks:
      - holy-grail-network
    environment:
      VITE_APP_API_URL: ${VITE_APP_API_URL}
      VITE_APP_AWS_S3_BUCKET_URL: ${VITE_APP_AWS_S3_BUCKET_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      FRONTEND_CONTAINER_URL: ${FRONTEND_CONTAINER_URL}
      BACKEND_URL: ${BACKEND_URL}
      BACKEND_CONTAINER_URL: ${BACKEND_CONTAINER_URL}
      PRODUCTION: ${PRODUCTION}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - '80:80'
      - '443:443'
      - '5175:5175'
      - '8000:8000'
    restart: always

  holy-grail-backend:
    container_name: holy-grail-backend
    image: ghcr.io/vichannnnn/holy-grail/holy-grail-backend:latest
    depends_on:
      - holy-grail-db
    networks:
      - holy-grail-network
    environment:
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      DATABASE_URL: ${DATABASE_URL}
      TASK_RUNNER_DATABASE_URL: ${TASK_RUNNER_DATABASE_URL}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ALGORITHM: ${ALGORITHM}
      SECRET_KEY: ${SECRET_KEY}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_S3_SECRET_ACCESS_KEY: ${AWS_S3_SECRET_ACCESS_KEY}
      AWS_CLOUDFRONT_URL: ${AWS_CLOUDFRONT_URL}
      MAILTRAP_BEARER_TOKEN: ${MAILTRAP_BEARER_TOKEN}
      MAILTRAP_API_KEY: ${MAILTRAP_API_KEY}
      PRODUCTION: ${PRODUCTION}
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    restart: always

  holy-grail-db:
    container_name: holy-grail-db
    image: postgres:14.1-alpine
    networks:
      - holy-grail-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./holy-grail-backend/db:/docker-entrypoint-initdb.d/
    ports:
      - '5432:5432'
    healthcheck:
      interval: 5s
      retries: 10
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
    restart: always

  holy-grail-redis:
    container_name: holy-grail-redis
    image: redis:7.0.7-alpine
    depends_on:
      - holy-grail-db
    networks:
      - holy-grail-network
    command: redis-server --loglevel verbose
    ports:
      - "6379"
    restart: always

  holy-grail-scheduler:
    container_name: holy-grail-scheduler
    image: ghcr.io/vichannnnn/holy-grail/holy-grail-scheduler:latest
    depends_on:
      - holy-grail-redis
    networks:
      - holy-grail-network
    environment:
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      DATABASE_URL: ${DATABASE_URL}
      TASK_RUNNER_DATABASE_URL: ${TASK_RUNNER_DATABASE_URL}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ALGORITHM: ${ALGORITHM}
      SECRET_KEY: ${SECRET_KEY}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_S3_SECRET_ACCESS_KEY: ${AWS_S3_SECRET_ACCESS_KEY}
      AWS_CLOUDFRONT_URL: ${AWS_CLOUDFRONT_URL}
      MAILTRAP_BEARER_TOKEN: ${MAILTRAP_BEARER_TOKEN}
      MAILTRAP_API_KEY: ${MAILTRAP_API_KEY}
    command: celery -A app.utils.worker worker -B --loglevel=info
    healthcheck:
      test: [ "CMD-SHELL", "celery inspect ping" ]
    restart: always

  holy-grail-scheduler-gui:
    container_name: holy-grail-scheduler-gui
    image: mher/flower:1.2.0
    depends_on:
      holy-grail-scheduler:
        condition: service_healthy
    networks:
      - holy-grail-network
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
    links:
      - holy-grail-scheduler
    ports:
      - "5555"
    restart: always

networks:
  holy-grail-network:
    name: holy-grail-network
    driver: bridge

volumes:
  caddy_config: null
  caddy_data: null
